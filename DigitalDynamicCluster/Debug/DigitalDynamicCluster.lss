
DigitalDynamicCluster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000263  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c2  00000000  00000000  000004f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000130  00000000  00000000  000006b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ab  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000104  00000000  00000000  00000a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 eb       	ldi	r30, 0xB4	; 180
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  a2:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <uart_init>:
#include <avr/sfr_defs.h>
#include <stdlib.h>
//#include "uart.h"

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  aa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	80 93 c4 00 	sts	0x00C4, r24
	
	# if USE_2X
	UCSR0A |= _BV(U2X0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	#else
	UCSR0A &= ~(_BV(U2X0));
	#endif
	
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24
  ca:	08 95       	ret

000000cc <uart_putchar>:
}

void uart_putchar(char c) {
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <uart_putchar+0x4>
	UDR0 = c;
  d6:	80 93 c6 00 	sts	0x00C6, r24
  da:	08 95       	ret

000000dc <uart_putstring>:
}

void uart_putstring(char* s) {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
	while (*s)
  e2:	88 81       	ld	r24, Y
  e4:	88 23       	and	r24, r24
  e6:	31 f0       	breq	.+12     	; 0xf4 <uart_putstring+0x18>
  e8:	21 96       	adiw	r28, 0x01	; 1
		uart_putchar(*s++);
  ea:	0e 94 66 00 	call	0xcc	; 0xcc <uart_putchar>
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
	UDR0 = c;
}

void uart_putstring(char* s) {
	while (*s)
  ee:	89 91       	ld	r24, Y+
  f0:	81 11       	cpse	r24, r1
  f2:	fb cf       	rjmp	.-10     	; 0xea <uart_putstring+0xe>
		uart_putchar(*s++);
		
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	64 97       	sbiw	r28, 0x14	; 20
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
	//uart_init(UART_BAUD_SELECT(9600, F_CPU));
	uart_init();
 10e:	0e 94 55 00 	call	0xaa	; 0xaa <uart_init>
	DDRA = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 b9       	out	0x01, r24	; 1
	int count = 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
	char buffer[20];
	while(1)
    {
		 //_delay_ms(500);
		 itoa(count++, buffer, 10);
 11a:	8c 01       	movw	r16, r24
 11c:	0f 5f       	subi	r16, 0xFF	; 255
 11e:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 120:	4a e0       	ldi	r20, 0x0A	; 10
 122:	be 01       	movw	r22, r28
 124:	6f 5f       	subi	r22, 0xFF	; 255
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	0e 94 a3 00 	call	0x146	; 0x146 <__itoa_ncheck>
		 uart_putstring(buffer);
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_putstring>
		 uart_putstring("\n");
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_putstring>
		 PORTA = ~PORTA;
 13c:	82 b1       	in	r24, 0x02	; 2
 13e:	80 95       	com	r24
 140:	82 b9       	out	0x02, r24	; 2
	int count = 0;
	char buffer[20];
	while(1)
    {
		 //_delay_ms(500);
		 itoa(count++, buffer, 10);
 142:	c8 01       	movw	r24, r16
 144:	ea cf       	rjmp	.-44     	; 0x11a <main+0x20>

00000146 <__itoa_ncheck>:
 146:	bb 27       	eor	r27, r27
 148:	4a 30       	cpi	r20, 0x0A	; 10
 14a:	31 f4       	brne	.+12     	; 0x158 <__itoa_ncheck+0x12>
 14c:	99 23       	and	r25, r25
 14e:	22 f4       	brpl	.+8      	; 0x158 <__itoa_ncheck+0x12>
 150:	bd e2       	ldi	r27, 0x2D	; 45
 152:	90 95       	com	r25
 154:	81 95       	neg	r24
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	0c 94 af 00 	jmp	0x15e	; 0x15e <__utoa_common>

0000015c <__utoa_ncheck>:
 15c:	bb 27       	eor	r27, r27

0000015e <__utoa_common>:
 15e:	fb 01       	movw	r30, r22
 160:	55 27       	eor	r21, r21
 162:	aa 27       	eor	r26, r26
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	aa 1f       	adc	r26, r26
 16a:	a4 17       	cp	r26, r20
 16c:	10 f0       	brcs	.+4      	; 0x172 <__utoa_common+0x14>
 16e:	a4 1b       	sub	r26, r20
 170:	83 95       	inc	r24
 172:	50 51       	subi	r21, 0x10	; 16
 174:	b9 f7       	brne	.-18     	; 0x164 <__utoa_common+0x6>
 176:	a0 5d       	subi	r26, 0xD0	; 208
 178:	aa 33       	cpi	r26, 0x3A	; 58
 17a:	08 f0       	brcs	.+2      	; 0x17e <__utoa_common+0x20>
 17c:	a9 5d       	subi	r26, 0xD9	; 217
 17e:	a1 93       	st	Z+, r26
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	79 f7       	brne	.-34     	; 0x162 <__utoa_common+0x4>
 184:	b1 11       	cpse	r27, r1
 186:	b1 93       	st	Z+, r27
 188:	11 92       	st	Z+, r1
 18a:	cb 01       	movw	r24, r22
 18c:	0c 94 c8 00 	jmp	0x190	; 0x190 <strrev>

00000190 <strrev>:
 190:	dc 01       	movw	r26, r24
 192:	fc 01       	movw	r30, r24
 194:	67 2f       	mov	r22, r23
 196:	71 91       	ld	r23, Z+
 198:	77 23       	and	r23, r23
 19a:	e1 f7       	brne	.-8      	; 0x194 <strrev+0x4>
 19c:	32 97       	sbiw	r30, 0x02	; 2
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <strrev+0x18>
 1a0:	7c 91       	ld	r23, X
 1a2:	6d 93       	st	X+, r22
 1a4:	70 83       	st	Z, r23
 1a6:	62 91       	ld	r22, -Z
 1a8:	ae 17       	cp	r26, r30
 1aa:	bf 07       	cpc	r27, r31
 1ac:	c8 f3       	brcs	.-14     	; 0x1a0 <strrev+0x10>
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
